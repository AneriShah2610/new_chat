type User {
    id: ID!
    userName: String!
    firstName: String
    lastName: String
    email: String!
    contact: String
    bio: String
    profilePicture: String
    createdAt: Time!
    updatedAt: Time
}
type ChatRoom {
    chatRoomID: ID!
    creatorID: ID!
    creator: User!
    chatRoomName: String
    chatRoomType: ChatRoomType!
    members: [Member!]!
    createdAt: Time!
    updateByID: ID
    updateBy: User
    updatedAt: Time
    deleteAt: Time
}
type Member{
    id: ID!
    chatRoomID: ID!
    member: User!
    joinAt: Time!
    deleteAt: Time
}

type ChatConversation{
    messageId: ID!
    chatRoomID: ID!
    senderID: ID!
    sender: User!
    message: String!
    messageType: MessageType!
    messageStatus: State!
    messageParentId: ID
    createdAt: Time!
    updatedAt: Time
}
type ChatRoomList{
    chatRoomID: ID!
    name: String
    chatRoomType: String!
    createdAt: Time!
}
enum ChatRoomType{
    PRIVATE
    GROUP
}
enum MessageType{
    TEXT
    IMAGE
    VIDEO
    GIF
    AUDIO
}
enum State{
    SEND
    UNREAD
    READ
    DELETE
}
input NewUser{
    userName: String!
    firstName: String
    lastName: String
    email: String!
    contact: String
    profilePicture: String
    bio: String
}
input NewPrivateChatRoom{
    creatorID: ID!
    chatRoomType: ChatRoomType!
    receiverID: ID!
}
input NewGroupChatRoom{
    creatorID: ID!
    chatRoomName: String!
    chatRoomType: ChatRoomType!
    receiverID: [ID!]
}
input NewChatRoomMembers{
    chatRoomID: ID!
    memberIDs: [ID!]
}
input NewMessage{
    chatRoomID: ID!
    senderID: ID!
    message: String!
    messageType: MessageType!
    messageParentId: ID
    messageStatus: State!
}
input UpdateUser{
    userName: String
    firstName: String
    lastName: String
}
input UpdateMessage{
    message: String
    senderID: ID!
    messageID: ID!
    chatRoomID: ID!
}
input UpdateMessageStatus{
    messageStatus: State!
}
input DeleteChat{
    chatRoomID: ID!
    memberID: ID!
}
input LeaveChatRoom{
    chatRoomID: ID!
    memberID: ID!
}
input UpdateChatRoomDetail{
    chatRoomID: ID!
    chatRoomName: String
    updateByID: ID
}
input DeleteChatRoom{
    chatRoomID: ID!
    creatorID: ID!
}
input DeleteMessage{
    chatRoomID: ID!
    messageID: ID!
    DeleteByID: ID!
}
type Subscription{
    userJoined: User!
    messagePost(chatRoomID: ID!): ChatConversation!
    messageStatusUpdate(messageID: ID!, chatRoomID: ID!): ChatConversation!
    messageUpdate(chatRoomID: ID!): ChatConversation!
    messageDelete(chatRoomID: ID!): ChatConversation!
    chatRoomLeave(chatRoomID: ID!): ChatRoom!
    chatRoomDetailUpdate(chatRoomID: ID!): ChatRoom!
    chatRoomDelete(chatRoomID: ID!): ChatRoom!
    chatDelete(chatRoomID: ID!): ChatRoom!
    addNewMemberInChatRoom(chatRoomID: ID!): ChatRoom!
    chatRoomListByMember(memberID: ID!): [ChatRoomList!]!
}
type Mutation{
    newUser(input: NewUser!): User!
    newPrivateChatRoom(input: NewPrivateChatRoom!): ChatRoom!
    newGroupchatRoom(input: NewGroupChatRoom!): ChatRoom!
    newChatRoomMembers(input: NewChatRoomMembers!): Boolean!
    newMessage(input: NewMessage!): ChatConversation!
    updateMessage(input: UpdateMessage): ChatConversation!
    updateMessageStatus(input: UpdateMessageStatus!): ChatConversation!
    deleteMessage(input: DeleteMessage): ChatConversation!
    deleteChat(input: DeleteChat!): Boolean!
    leaveChatRoom(input: LeaveChatRoom!): String!
    updateChatRoomDetail(input: UpdateChatRoomDetail!): ChatRoom!
    deleteChatRoom(input: DeleteChatRoom!): ChatRoom!
}
type Query{
    users(name: String!): [User!]!
    chatRooms: [ChatRoom!]
    chatconversationByChatRoomId(chatRoomID: ID!, memberID: ID!): [ChatConversation!]!
    memberListByChatRoomId(chatRoomID: ID!, memberID: ID!): [Member!]!
    chatRoomListByMemberId(memberID: ID!): [ChatRoomList!]!
    MemberLogIn(name: String!): User
}
scalar Time