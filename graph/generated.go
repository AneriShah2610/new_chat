// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	bytes "bytes"
	context "context"
	strconv "strconv"
	sync "sync"
	time "time"

	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	model "github.com/aneri/new_chat/model"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	ChatConversation() ChatConversationResolver
	ChatRoom() ChatRoomResolver
	Member() MemberResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ChatConversation struct {
		MessageId       func(childComplexity int) int
		ChatRoomId      func(childComplexity int) int
		SenderId        func(childComplexity int) int
		Sender          func(childComplexity int) int
		Message         func(childComplexity int) int
		MessageType     func(childComplexity int) int
		MessageStatus   func(childComplexity int) int
		MessageParentId func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	ChatRoom struct {
		ChatRoomId   func(childComplexity int) int
		CreatorId    func(childComplexity int) int
		Creator      func(childComplexity int) int
		ChatRoomName func(childComplexity int) int
		ChatRoomType func(childComplexity int) int
		Members      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		UpdateById   func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
	}

	ChatRoomList struct {
		ChatRoomId   func(childComplexity int) int
		Name         func(childComplexity int) int
		ChatRoomType func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
	}

	Member struct {
		Id         func(childComplexity int) int
		ChatRoomId func(childComplexity int) int
		Member     func(childComplexity int) int
		JoinAt     func(childComplexity int) int
		DeleteAt   func(childComplexity int) int
	}

	Mutation struct {
		NewUser              func(childComplexity int, input model.NewUser) int
		NewChatRoom          func(childComplexity int, input model.NewChatRoom, receiverID *int) int
		NewChatRoomMember    func(childComplexity int, input model.NewChatRoomMember) int
		NewMessage           func(childComplexity int, input model.NewMessage, senderID int) int
		UpdateMessage        func(childComplexity int, input *model.UpdateMessage) int
		UpdateMessageStatus  func(childComplexity int, input model.UpdateMessageStatus) int
		DeleteMessage        func(childComplexity int, input *model.DeleteMessage) int
		DeleteChat           func(childComplexity int, input model.DeleteChat) int
		LeaveChatRoom        func(childComplexity int, input model.LeaveChatRoom) int
		UpdateChatRoomDetail func(childComplexity int, input model.UpdateChatRoomDetail) int
		DeleteChatRoom       func(childComplexity int, input model.DeleteChatRoom) int
	}

	Query struct {
		Users                        func(childComplexity int, name string) int
		ChatRooms                    func(childComplexity int) int
		ChatconversationByChatRoomId func(childComplexity int, chatRoomID int, memberID int) int
		MemberListByChatRoomId       func(childComplexity int, chatRoomID int, memberID int) int
		ChatRoomListByMemberId       func(childComplexity int, memberID int) int
	}

	Subscription struct {
		UserJoined             func(childComplexity int) int
		MessagePost            func(childComplexity int, chatRoomID int) int
		MessageStatusUpdate    func(childComplexity int, messageID int, chatRoomID int) int
		MessageUpdate          func(childComplexity int, chatRoomID int) int
		MessageDelete          func(childComplexity int, chatRoomID int) int
		ChatRoomLeave          func(childComplexity int, chatRoomID int) int
		ChatRoomDetailUpdate   func(childComplexity int, chatRoomID int) int
		ChatRoomDelete         func(childComplexity int, chatRoomID int) int
		ChatDelete             func(childComplexity int, chatRoomID int) int
		AddNewMemberInChatRoom func(childComplexity int, chatRoomID int) int
		ChatRoomListByMember   func(childComplexity int, memberID int) int
	}

	User struct {
		Id             func(childComplexity int) int
		UserName       func(childComplexity int) int
		FirstName      func(childComplexity int) int
		LastName       func(childComplexity int) int
		Email          func(childComplexity int) int
		Contact        func(childComplexity int) int
		Bio            func(childComplexity int) int
		ProfilePicture func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}
}

type ChatConversationResolver interface {
	Sender(ctx context.Context, obj *model.ChatConversation) (model.User, error)
}
type ChatRoomResolver interface {
	Creator(ctx context.Context, obj *model.ChatRoom) (model.User, error)

	Members(ctx context.Context, obj *model.ChatRoom) ([]model.Member, error)

	UpdateBy(ctx context.Context, obj *model.ChatRoom) (*model.User, error)
}
type MemberResolver interface {
	Member(ctx context.Context, obj *model.Member) (model.User, error)
}
type MutationResolver interface {
	NewUser(ctx context.Context, input model.NewUser) (model.User, error)
	NewChatRoom(ctx context.Context, input model.NewChatRoom, receiverID *int) (model.ChatRoom, error)
	NewChatRoomMember(ctx context.Context, input model.NewChatRoomMember) (model.Member, error)
	NewMessage(ctx context.Context, input model.NewMessage, senderID int) (model.ChatConversation, error)
	UpdateMessage(ctx context.Context, input *model.UpdateMessage) (model.ChatConversation, error)
	UpdateMessageStatus(ctx context.Context, input model.UpdateMessageStatus) (model.ChatConversation, error)
	DeleteMessage(ctx context.Context, input *model.DeleteMessage) (model.ChatConversation, error)
	DeleteChat(ctx context.Context, input model.DeleteChat) (model.Member, error)
	LeaveChatRoom(ctx context.Context, input model.LeaveChatRoom) (string, error)
	UpdateChatRoomDetail(ctx context.Context, input model.UpdateChatRoomDetail) (model.ChatRoom, error)
	DeleteChatRoom(ctx context.Context, input model.DeleteChatRoom) (model.ChatRoom, error)
}
type QueryResolver interface {
	Users(ctx context.Context, name string) ([]model.User, error)
	ChatRooms(ctx context.Context) ([]model.ChatRoom, error)
	ChatconversationByChatRoomID(ctx context.Context, chatRoomID int, memberID int) ([]model.ChatConversation, error)
	MemberListByChatRoomID(ctx context.Context, chatRoomID int, memberID int) ([]model.Member, error)
	ChatRoomListByMemberID(ctx context.Context, memberID int) ([]model.ChatRoomList, error)
}
type SubscriptionResolver interface {
	UserJoined(ctx context.Context) (<-chan model.User, error)
	MessagePost(ctx context.Context, chatRoomID int) (<-chan model.ChatConversation, error)
	MessageStatusUpdate(ctx context.Context, messageID int, chatRoomID int) (<-chan model.ChatConversation, error)
	MessageUpdate(ctx context.Context, chatRoomID int) (<-chan model.ChatConversation, error)
	MessageDelete(ctx context.Context, chatRoomID int) (<-chan model.ChatConversation, error)
	ChatRoomLeave(ctx context.Context, chatRoomID int) (<-chan model.ChatRoom, error)
	ChatRoomDetailUpdate(ctx context.Context, chatRoomID int) (<-chan model.ChatRoom, error)
	ChatRoomDelete(ctx context.Context, chatRoomID int) (<-chan model.ChatRoom, error)
	ChatDelete(ctx context.Context, chatRoomID int) (<-chan model.ChatRoom, error)
	AddNewMemberInChatRoom(ctx context.Context, chatRoomID int) (<-chan model.ChatRoom, error)
	ChatRoomListByMember(ctx context.Context, memberID int) (<-chan model.ChatRoom, error)
}

func field_Mutation_newUser_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.NewUser
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalNewUser(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_newChatRoom_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.NewChatRoom
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalNewChatRoom(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["receiverID"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = model.UnmarshalID(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["receiverID"] = arg1
	return args, nil

}

func field_Mutation_newChatRoomMember_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.NewChatRoomMember
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalNewChatRoomMember(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_newMessage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.NewMessage
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalNewMessage(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["senderID"]; ok {
		var err error
		arg1, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["senderID"] = arg1
	return args, nil

}

func field_Mutation_updateMessage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *model.UpdateMessage
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		var ptr1 model.UpdateMessage
		if tmp != nil {
			ptr1, err = UnmarshalUpdateMessage(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_updateMessageStatus_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.UpdateMessageStatus
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalUpdateMessageStatus(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_deleteMessage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *model.DeleteMessage
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		var ptr1 model.DeleteMessage
		if tmp != nil {
			ptr1, err = UnmarshalDeleteMessage(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_deleteChat_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.DeleteChat
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalDeleteChat(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_leaveChatRoom_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.LeaveChatRoom
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalLeaveChatRoom(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_updateChatRoomDetail_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.UpdateChatRoomDetail
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalUpdateChatRoomDetail(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_deleteChatRoom_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 model.DeleteChatRoom
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalDeleteChatRoom(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Query_users_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Query_chatconversationByChatRoomId_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["memberID"]; ok {
		var err error
		arg1, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg1
	return args, nil

}

func field_Query_memberListByChatRoomId_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["memberID"]; ok {
		var err error
		arg1, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg1
	return args, nil

}

func field_Query_chatRoomListByMemberId_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["memberID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Subscription_messagePost_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_messageStatusUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["messageID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["messageID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg1, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg1
	return args, nil

}

func field_Subscription_messageUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_messageDelete_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_chatRoomLeave_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_chatRoomDetailUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_chatRoomDelete_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_chatDelete_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_addNewMemberInChatRoom_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["chatRoomID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chatRoomID"] = arg0
	return args, nil

}

func field_Subscription_chatRoomListByMember_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["memberID"]; ok {
		var err error
		arg0, err = model.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "ChatConversation.messageId":
		if e.complexity.ChatConversation.MessageId == nil {
			break
		}

		return e.complexity.ChatConversation.MessageId(childComplexity), true

	case "ChatConversation.chatRoomID":
		if e.complexity.ChatConversation.ChatRoomId == nil {
			break
		}

		return e.complexity.ChatConversation.ChatRoomId(childComplexity), true

	case "ChatConversation.senderID":
		if e.complexity.ChatConversation.SenderId == nil {
			break
		}

		return e.complexity.ChatConversation.SenderId(childComplexity), true

	case "ChatConversation.sender":
		if e.complexity.ChatConversation.Sender == nil {
			break
		}

		return e.complexity.ChatConversation.Sender(childComplexity), true

	case "ChatConversation.message":
		if e.complexity.ChatConversation.Message == nil {
			break
		}

		return e.complexity.ChatConversation.Message(childComplexity), true

	case "ChatConversation.messageType":
		if e.complexity.ChatConversation.MessageType == nil {
			break
		}

		return e.complexity.ChatConversation.MessageType(childComplexity), true

	case "ChatConversation.messageStatus":
		if e.complexity.ChatConversation.MessageStatus == nil {
			break
		}

		return e.complexity.ChatConversation.MessageStatus(childComplexity), true

	case "ChatConversation.messageParentId":
		if e.complexity.ChatConversation.MessageParentId == nil {
			break
		}

		return e.complexity.ChatConversation.MessageParentId(childComplexity), true

	case "ChatConversation.createdAt":
		if e.complexity.ChatConversation.CreatedAt == nil {
			break
		}

		return e.complexity.ChatConversation.CreatedAt(childComplexity), true

	case "ChatConversation.updatedAt":
		if e.complexity.ChatConversation.UpdatedAt == nil {
			break
		}

		return e.complexity.ChatConversation.UpdatedAt(childComplexity), true

	case "ChatRoom.chatRoomID":
		if e.complexity.ChatRoom.ChatRoomId == nil {
			break
		}

		return e.complexity.ChatRoom.ChatRoomId(childComplexity), true

	case "ChatRoom.creatorID":
		if e.complexity.ChatRoom.CreatorId == nil {
			break
		}

		return e.complexity.ChatRoom.CreatorId(childComplexity), true

	case "ChatRoom.creator":
		if e.complexity.ChatRoom.Creator == nil {
			break
		}

		return e.complexity.ChatRoom.Creator(childComplexity), true

	case "ChatRoom.chatRoomName":
		if e.complexity.ChatRoom.ChatRoomName == nil {
			break
		}

		return e.complexity.ChatRoom.ChatRoomName(childComplexity), true

	case "ChatRoom.chatRoomType":
		if e.complexity.ChatRoom.ChatRoomType == nil {
			break
		}

		return e.complexity.ChatRoom.ChatRoomType(childComplexity), true

	case "ChatRoom.members":
		if e.complexity.ChatRoom.Members == nil {
			break
		}

		return e.complexity.ChatRoom.Members(childComplexity), true

	case "ChatRoom.createdAt":
		if e.complexity.ChatRoom.CreatedAt == nil {
			break
		}

		return e.complexity.ChatRoom.CreatedAt(childComplexity), true

	case "ChatRoom.updateByID":
		if e.complexity.ChatRoom.UpdateById == nil {
			break
		}

		return e.complexity.ChatRoom.UpdateById(childComplexity), true

	case "ChatRoom.updateBy":
		if e.complexity.ChatRoom.UpdateBy == nil {
			break
		}

		return e.complexity.ChatRoom.UpdateBy(childComplexity), true

	case "ChatRoom.updatedAt":
		if e.complexity.ChatRoom.UpdatedAt == nil {
			break
		}

		return e.complexity.ChatRoom.UpdatedAt(childComplexity), true

	case "ChatRoom.deleteAt":
		if e.complexity.ChatRoom.DeleteAt == nil {
			break
		}

		return e.complexity.ChatRoom.DeleteAt(childComplexity), true

	case "ChatRoomList.chatRoomID":
		if e.complexity.ChatRoomList.ChatRoomId == nil {
			break
		}

		return e.complexity.ChatRoomList.ChatRoomId(childComplexity), true

	case "ChatRoomList.name":
		if e.complexity.ChatRoomList.Name == nil {
			break
		}

		return e.complexity.ChatRoomList.Name(childComplexity), true

	case "ChatRoomList.chatRoomType":
		if e.complexity.ChatRoomList.ChatRoomType == nil {
			break
		}

		return e.complexity.ChatRoomList.ChatRoomType(childComplexity), true

	case "ChatRoomList.createdAt":
		if e.complexity.ChatRoomList.CreatedAt == nil {
			break
		}

		return e.complexity.ChatRoomList.CreatedAt(childComplexity), true

	case "Member.id":
		if e.complexity.Member.Id == nil {
			break
		}

		return e.complexity.Member.Id(childComplexity), true

	case "Member.chatRoomID":
		if e.complexity.Member.ChatRoomId == nil {
			break
		}

		return e.complexity.Member.ChatRoomId(childComplexity), true

	case "Member.member":
		if e.complexity.Member.Member == nil {
			break
		}

		return e.complexity.Member.Member(childComplexity), true

	case "Member.joinAt":
		if e.complexity.Member.JoinAt == nil {
			break
		}

		return e.complexity.Member.JoinAt(childComplexity), true

	case "Member.deleteAt":
		if e.complexity.Member.DeleteAt == nil {
			break
		}

		return e.complexity.Member.DeleteAt(childComplexity), true

	case "Mutation.newUser":
		if e.complexity.Mutation.NewUser == nil {
			break
		}

		args, err := field_Mutation_newUser_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewUser(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.newChatRoom":
		if e.complexity.Mutation.NewChatRoom == nil {
			break
		}

		args, err := field_Mutation_newChatRoom_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewChatRoom(childComplexity, args["input"].(model.NewChatRoom), args["receiverID"].(*int)), true

	case "Mutation.newChatRoomMember":
		if e.complexity.Mutation.NewChatRoomMember == nil {
			break
		}

		args, err := field_Mutation_newChatRoomMember_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewChatRoomMember(childComplexity, args["input"].(model.NewChatRoomMember)), true

	case "Mutation.newMessage":
		if e.complexity.Mutation.NewMessage == nil {
			break
		}

		args, err := field_Mutation_newMessage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewMessage(childComplexity, args["input"].(model.NewMessage), args["senderID"].(int)), true

	case "Mutation.updateMessage":
		if e.complexity.Mutation.UpdateMessage == nil {
			break
		}

		args, err := field_Mutation_updateMessage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMessage(childComplexity, args["input"].(*model.UpdateMessage)), true

	case "Mutation.updateMessageStatus":
		if e.complexity.Mutation.UpdateMessageStatus == nil {
			break
		}

		args, err := field_Mutation_updateMessageStatus_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMessageStatus(childComplexity, args["input"].(model.UpdateMessageStatus)), true

	case "Mutation.deleteMessage":
		if e.complexity.Mutation.DeleteMessage == nil {
			break
		}

		args, err := field_Mutation_deleteMessage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMessage(childComplexity, args["input"].(*model.DeleteMessage)), true

	case "Mutation.deleteChat":
		if e.complexity.Mutation.DeleteChat == nil {
			break
		}

		args, err := field_Mutation_deleteChat_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChat(childComplexity, args["input"].(model.DeleteChat)), true

	case "Mutation.leaveChatRoom":
		if e.complexity.Mutation.LeaveChatRoom == nil {
			break
		}

		args, err := field_Mutation_leaveChatRoom_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeaveChatRoom(childComplexity, args["input"].(model.LeaveChatRoom)), true

	case "Mutation.updateChatRoomDetail":
		if e.complexity.Mutation.UpdateChatRoomDetail == nil {
			break
		}

		args, err := field_Mutation_updateChatRoomDetail_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChatRoomDetail(childComplexity, args["input"].(model.UpdateChatRoomDetail)), true

	case "Mutation.deleteChatRoom":
		if e.complexity.Mutation.DeleteChatRoom == nil {
			break
		}

		args, err := field_Mutation_deleteChatRoom_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChatRoom(childComplexity, args["input"].(model.DeleteChatRoom)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := field_Query_users_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["name"].(string)), true

	case "Query.chatRooms":
		if e.complexity.Query.ChatRooms == nil {
			break
		}

		return e.complexity.Query.ChatRooms(childComplexity), true

	case "Query.chatconversationByChatRoomId":
		if e.complexity.Query.ChatconversationByChatRoomId == nil {
			break
		}

		args, err := field_Query_chatconversationByChatRoomId_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChatconversationByChatRoomId(childComplexity, args["chatRoomID"].(int), args["memberID"].(int)), true

	case "Query.memberListByChatRoomId":
		if e.complexity.Query.MemberListByChatRoomId == nil {
			break
		}

		args, err := field_Query_memberListByChatRoomId_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MemberListByChatRoomId(childComplexity, args["chatRoomID"].(int), args["memberID"].(int)), true

	case "Query.chatRoomListByMemberId":
		if e.complexity.Query.ChatRoomListByMemberId == nil {
			break
		}

		args, err := field_Query_chatRoomListByMemberId_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChatRoomListByMemberId(childComplexity, args["memberID"].(int)), true

	case "Subscription.userJoined":
		if e.complexity.Subscription.UserJoined == nil {
			break
		}

		return e.complexity.Subscription.UserJoined(childComplexity), true

	case "Subscription.messagePost":
		if e.complexity.Subscription.MessagePost == nil {
			break
		}

		args, err := field_Subscription_messagePost_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MessagePost(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.messageStatusUpdate":
		if e.complexity.Subscription.MessageStatusUpdate == nil {
			break
		}

		args, err := field_Subscription_messageStatusUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MessageStatusUpdate(childComplexity, args["messageID"].(int), args["chatRoomID"].(int)), true

	case "Subscription.messageUpdate":
		if e.complexity.Subscription.MessageUpdate == nil {
			break
		}

		args, err := field_Subscription_messageUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MessageUpdate(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.messageDelete":
		if e.complexity.Subscription.MessageDelete == nil {
			break
		}

		args, err := field_Subscription_messageDelete_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MessageDelete(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.chatRoomLeave":
		if e.complexity.Subscription.ChatRoomLeave == nil {
			break
		}

		args, err := field_Subscription_chatRoomLeave_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ChatRoomLeave(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.chatRoomDetailUpdate":
		if e.complexity.Subscription.ChatRoomDetailUpdate == nil {
			break
		}

		args, err := field_Subscription_chatRoomDetailUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ChatRoomDetailUpdate(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.chatRoomDelete":
		if e.complexity.Subscription.ChatRoomDelete == nil {
			break
		}

		args, err := field_Subscription_chatRoomDelete_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ChatRoomDelete(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.chatDelete":
		if e.complexity.Subscription.ChatDelete == nil {
			break
		}

		args, err := field_Subscription_chatDelete_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ChatDelete(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.addNewMemberInChatRoom":
		if e.complexity.Subscription.AddNewMemberInChatRoom == nil {
			break
		}

		args, err := field_Subscription_addNewMemberInChatRoom_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AddNewMemberInChatRoom(childComplexity, args["chatRoomID"].(int)), true

	case "Subscription.chatRoomListByMember":
		if e.complexity.Subscription.ChatRoomListByMember == nil {
			break
		}

		args, err := field_Subscription_chatRoomListByMember_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ChatRoomListByMember(childComplexity, args["memberID"].(int)), true

	case "User.id":
		if e.complexity.User.Id == nil {
			break
		}

		return e.complexity.User.Id(childComplexity), true

	case "User.userName":
		if e.complexity.User.UserName == nil {
			break
		}

		return e.complexity.User.UserName(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.contact":
		if e.complexity.User.Contact == nil {
			break
		}

		return e.complexity.User.Contact(childComplexity), true

	case "User.bio":
		if e.complexity.User.Bio == nil {
			break
		}

		return e.complexity.User.Bio(childComplexity), true

	case "User.profilePicture":
		if e.complexity.User.ProfilePicture == nil {
			break
		}

		return e.complexity.User.ProfilePicture(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	next := ec._Subscription(ctx, op.SelectionSet)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		if buf == nil {
			return nil
		}

		return &graphql.Response{
			Data:       buf,
			Errors:     ec.Errors,
			Extensions: ec.Extensions,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var chatConversationImplementors = []string{"ChatConversation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ChatConversation(ctx context.Context, sel ast.SelectionSet, obj *model.ChatConversation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, chatConversationImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatConversation")
		case "messageId":
			out.Values[i] = ec._ChatConversation_messageId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "chatRoomID":
			out.Values[i] = ec._ChatConversation_chatRoomID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "senderID":
			out.Values[i] = ec._ChatConversation_senderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "sender":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ChatConversation_sender(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "message":
			out.Values[i] = ec._ChatConversation_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "messageType":
			out.Values[i] = ec._ChatConversation_messageType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "messageStatus":
			out.Values[i] = ec._ChatConversation_messageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "messageParentId":
			out.Values[i] = ec._ChatConversation_messageParentId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ChatConversation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updatedAt":
			out.Values[i] = ec._ChatConversation_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_messageId(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_chatRoomID(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatRoomID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_senderID(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_sender(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChatConversation().Sender(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.User)
	rctx.Result = res

	return ec._User(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_message(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_messageType(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MessageType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_messageStatus(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.State)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_messageParentId(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageParentID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return model.MarshalID(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatConversation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChatConversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var chatRoomImplementors = []string{"ChatRoom"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ChatRoom(ctx context.Context, sel ast.SelectionSet, obj *model.ChatRoom) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, chatRoomImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatRoom")
		case "chatRoomID":
			out.Values[i] = ec._ChatRoom_chatRoomID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "creatorID":
			out.Values[i] = ec._ChatRoom_creatorID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "creator":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ChatRoom_creator(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "chatRoomName":
			out.Values[i] = ec._ChatRoom_chatRoomName(ctx, field, obj)
		case "chatRoomType":
			out.Values[i] = ec._ChatRoom_chatRoomType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "members":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ChatRoom_members(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._ChatRoom_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updateByID":
			out.Values[i] = ec._ChatRoom_updateByID(ctx, field, obj)
		case "updateBy":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ChatRoom_updateBy(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "updatedAt":
			out.Values[i] = ec._ChatRoom_updatedAt(ctx, field, obj)
		case "deleteAt":
			out.Values[i] = ec._ChatRoom_deleteAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_chatRoomID(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatRoomID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_creatorID(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_creator(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChatRoom().Creator(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.User)
	rctx.Result = res

	return ec._User(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_chatRoomName(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatRoomName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_chatRoomType(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatRoomType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatRoomType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_members(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChatRoom().Members(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Member)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Member(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_updateByID(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateByID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return model.MarshalID(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_updateBy(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChatRoom().UpdateBy(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._User(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoom_deleteAt(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoom) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoom",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var chatRoomListImplementors = []string{"ChatRoomList"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ChatRoomList(ctx context.Context, sel ast.SelectionSet, obj *model.ChatRoomList) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, chatRoomListImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatRoomList")
		case "chatRoomID":
			out.Values[i] = ec._ChatRoomList_chatRoomID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec._ChatRoomList_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "chatRoomType":
			out.Values[i] = ec._ChatRoomList_chatRoomType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._ChatRoomList_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoomList_chatRoomID(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoomList) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoomList",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatRoomID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoomList_name(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoomList) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoomList",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoomList_chatRoomType(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoomList) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoomList",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatRoomType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ChatRoomList_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ChatRoomList) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ChatRoomList",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return graphql.MarshalTime(res)
}

var memberImplementors = []string{"Member"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Member(ctx context.Context, sel ast.SelectionSet, obj *model.Member) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, memberImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Member")
		case "id":
			out.Values[i] = ec._Member_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "chatRoomID":
			out.Values[i] = ec._Member_chatRoomID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "member":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Member_member(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "joinAt":
			out.Values[i] = ec._Member_joinAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deleteAt":
			out.Values[i] = ec._Member_deleteAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Member_id(ctx context.Context, field graphql.CollectedField, obj *model.Member) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Member",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _Member_chatRoomID(ctx context.Context, field graphql.CollectedField, obj *model.Member) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Member",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatRoomID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _Member_member(ctx context.Context, field graphql.CollectedField, obj *model.Member) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Member",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Member().Member(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.User)
	rctx.Result = res

	return ec._User(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Member_joinAt(ctx context.Context, field graphql.CollectedField, obj *model.Member) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Member",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JoinAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _Member_deleteAt(ctx context.Context, field graphql.CollectedField, obj *model.Member) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Member",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "newUser":
			out.Values[i] = ec._Mutation_newUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "newChatRoom":
			out.Values[i] = ec._Mutation_newChatRoom(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "newChatRoomMember":
			out.Values[i] = ec._Mutation_newChatRoomMember(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "newMessage":
			out.Values[i] = ec._Mutation_newMessage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updateMessage":
			out.Values[i] = ec._Mutation_updateMessage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updateMessageStatus":
			out.Values[i] = ec._Mutation_updateMessageStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deleteMessage":
			out.Values[i] = ec._Mutation_deleteMessage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deleteChat":
			out.Values[i] = ec._Mutation_deleteChat(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "leaveChatRoom":
			out.Values[i] = ec._Mutation_leaveChatRoom(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updateChatRoomDetail":
			out.Values[i] = ec._Mutation_updateChatRoomDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deleteChatRoom":
			out.Values[i] = ec._Mutation_deleteChatRoom(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_newUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_newUser_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewUser(rctx, args["input"].(model.NewUser))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.User)
	rctx.Result = res

	return ec._User(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_newChatRoom(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_newChatRoom_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewChatRoom(rctx, args["input"].(model.NewChatRoom), args["receiverID"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatRoom)
	rctx.Result = res

	return ec._ChatRoom(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_newChatRoomMember(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_newChatRoomMember_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewChatRoomMember(rctx, args["input"].(model.NewChatRoomMember))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Member)
	rctx.Result = res

	return ec._Member(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_newMessage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_newMessage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewMessage(rctx, args["input"].(model.NewMessage), args["senderID"].(int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatConversation)
	rctx.Result = res

	return ec._ChatConversation(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_updateMessage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_updateMessage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMessage(rctx, args["input"].(*model.UpdateMessage))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatConversation)
	rctx.Result = res

	return ec._ChatConversation(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_updateMessageStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_updateMessageStatus_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMessageStatus(rctx, args["input"].(model.UpdateMessageStatus))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatConversation)
	rctx.Result = res

	return ec._ChatConversation(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteMessage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteMessage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMessage(rctx, args["input"].(*model.DeleteMessage))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatConversation)
	rctx.Result = res

	return ec._ChatConversation(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteChat(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteChat_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChat(rctx, args["input"].(model.DeleteChat))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Member)
	rctx.Result = res

	return ec._Member(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_leaveChatRoom(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_leaveChatRoom_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LeaveChatRoom(rctx, args["input"].(model.LeaveChatRoom))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_updateChatRoomDetail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_updateChatRoomDetail_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChatRoomDetail(rctx, args["input"].(model.UpdateChatRoomDetail))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatRoom)
	rctx.Result = res

	return ec._ChatRoom(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteChatRoom(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteChatRoom_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChatRoom(rctx, args["input"].(model.DeleteChatRoom))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChatRoom)
	rctx.Result = res

	return ec._ChatRoom(ctx, field.Selections, &res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "users":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_users(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "chatRooms":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_chatRooms(ctx, field)
				wg.Done()
			}(i, field)
		case "chatconversationByChatRoomId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_chatconversationByChatRoomId(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "memberListByChatRoomId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_memberListByChatRoomId(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "chatRoomListByMemberId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_chatRoomListByMemberId(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_users_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, args["name"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.User)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._User(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_chatRooms(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChatRooms(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ChatRoom)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ChatRoom(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_chatconversationByChatRoomId(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_chatconversationByChatRoomId_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChatconversationByChatRoomID(rctx, args["chatRoomID"].(int), args["memberID"].(int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ChatConversation)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ChatConversation(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_memberListByChatRoomId(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_memberListByChatRoomId_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MemberListByChatRoomID(rctx, args["chatRoomID"].(int), args["memberID"].(int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Member)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Member(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_chatRoomListByMemberId(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_chatRoomListByMemberId_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChatRoomListByMemberID(rctx, args["memberID"].(int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ChatRoomList)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ChatRoomList(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Schema(ctx, field.Selections, res)
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, subscriptionImplementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "userJoined":
		return ec._Subscription_userJoined(ctx, fields[0])
	case "messagePost":
		return ec._Subscription_messagePost(ctx, fields[0])
	case "messageStatusUpdate":
		return ec._Subscription_messageStatusUpdate(ctx, fields[0])
	case "messageUpdate":
		return ec._Subscription_messageUpdate(ctx, fields[0])
	case "messageDelete":
		return ec._Subscription_messageDelete(ctx, fields[0])
	case "chatRoomLeave":
		return ec._Subscription_chatRoomLeave(ctx, fields[0])
	case "chatRoomDetailUpdate":
		return ec._Subscription_chatRoomDetailUpdate(ctx, fields[0])
	case "chatRoomDelete":
		return ec._Subscription_chatRoomDelete(ctx, fields[0])
	case "chatDelete":
		return ec._Subscription_chatDelete(ctx, fields[0])
	case "addNewMemberInChatRoom":
		return ec._Subscription_addNewMemberInChatRoom(ctx, fields[0])
	case "chatRoomListByMember":
		return ec._Subscription_chatRoomListByMember(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_userJoined(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().UserJoined(rctx)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._User(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_messagePost(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_messagePost_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MessagePost(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatConversation(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_messageStatusUpdate(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_messageStatusUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MessageStatusUpdate(rctx, args["messageID"].(int), args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatConversation(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_messageUpdate(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_messageUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MessageUpdate(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatConversation(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_messageDelete(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_messageDelete_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MessageDelete(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatConversation(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_chatRoomLeave(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_chatRoomLeave_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().ChatRoomLeave(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatRoom(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_chatRoomDetailUpdate(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_chatRoomDetailUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().ChatRoomDetailUpdate(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatRoom(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_chatRoomDelete(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_chatRoomDelete_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().ChatRoomDelete(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatRoom(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_chatDelete(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_chatDelete_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().ChatDelete(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatRoom(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_addNewMemberInChatRoom(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_addNewMemberInChatRoom_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().AddNewMemberInChatRoom(rctx, args["chatRoomID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatRoom(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_chatRoomListByMember(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_chatRoomListByMember_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().ChatRoomListByMember(rctx, args["memberID"].(int))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ChatRoom(ctx, field.Selections, &res)
		}())
		return &out
	}
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "userName":
			out.Values[i] = ec._User_userName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contact":
			out.Values[i] = ec._User_contact(ctx, field, obj)
		case "bio":
			out.Values[i] = ec._User_bio(ctx, field, obj)
		case "profilePicture":
			out.Values[i] = ec._User_profilePicture(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return model.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_userName(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_contact(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _User_bio(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bio, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _User_profilePicture(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePicture, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Directive(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Field(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___EnumValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

func UnmarshalDeleteChat(v interface{}) (model.DeleteChat, error) {
	var it model.DeleteChat
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "memberID":
			var err error
			it.MemberID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalDeleteChatRoom(v interface{}) (model.DeleteChatRoom, error) {
	var it model.DeleteChatRoom
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "creaorID":
			var err error
			it.CreaorID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalDeleteMessage(v interface{}) (model.DeleteMessage, error) {
	var it model.DeleteMessage
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "messageID":
			var err error
			it.MessageID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "DeleteByID":
			var err error
			it.DeleteByID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalLeaveChatRoom(v interface{}) (model.LeaveChatRoom, error) {
	var it model.LeaveChatRoom
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "memberID":
			var err error
			it.MemberID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalNewChatRoom(v interface{}) (model.NewChatRoom, error) {
	var it model.NewChatRoom
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "creatorID":
			var err error
			it.CreatorID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "chatRoomName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.ChatRoomName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "chatRoomType":
			var err error
			err = (&it.ChatRoomType).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalNewChatRoomMember(v interface{}) (model.NewChatRoomMember, error) {
	var it model.NewChatRoomMember
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "memberID":
			var err error
			it.MemberID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalNewMessage(v interface{}) (model.NewMessage, error) {
	var it model.NewMessage
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "senderID":
			var err error
			it.SenderID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "messageType":
			var err error
			err = (&it.MessageType).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "messageParentId":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = model.UnmarshalID(v)
				it.MessageParentID = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "messageStatus":
			var err error
			err = (&it.MessageStatus).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalNewUser(v interface{}) (model.NewUser, error) {
	var it model.NewUser
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userName":
			var err error
			it.UserName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.FirstName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.LastName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "contact":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Contact = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "profilePicture":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.ProfilePicture = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "bio":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Bio = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUpdateChatRoomDetail(v interface{}) (model.UpdateChatRoomDetail, error) {
	var it model.UpdateChatRoomDetail
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "chatRoomName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.ChatRoomName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "updateByID":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = model.UnmarshalID(v)
				it.UpdateByID = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUpdateMessage(v interface{}) (model.UpdateMessage, error) {
	var it model.UpdateMessage
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "message":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Message = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "senderID":
			var err error
			it.SenderID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "messageID":
			var err error
			it.MessageID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "chatRoomID":
			var err error
			it.ChatRoomID, err = model.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUpdateMessageStatus(v interface{}) (model.UpdateMessageStatus, error) {
	var it model.UpdateMessageStatus
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "messageStatus":
			var err error
			err = (&it.MessageStatus).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUpdateUser(v interface{}) (model.UpdateUser, error) {
	var it model.UpdateUser
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.UserName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.FirstName = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.LastName = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `type User {
    id: ID!
    userName: String!
    firstName: String
    lastName: String
    email: String!
    contact: String
    bio: String
    profilePicture: String
    createdAt: Time!
    updatedAt: Time
}
type ChatRoom {
    chatRoomID: ID!
    creatorID: ID!
    creator: User!
    chatRoomName: String
    chatRoomType: ChatRoomType!
    members: [Member!]!
    createdAt: Time!
    updateByID: ID
    updateBy: User
    updatedAt: Time
    deleteAt: Time
}
type Member{
    id: ID!
    chatRoomID: ID!
    member: User!
    joinAt: Time!
    deleteAt: Time
}

type ChatConversation{
    messageId: ID!
    chatRoomID: ID!
    senderID: ID!
    sender: User!
    message: String!
    messageType: MessageType!
    messageStatus: State!
    messageParentId: ID
    createdAt: Time!
    updatedAt: Time
}
type ChatRoomList{
    chatRoomID: ID!
    name: String!
    chatRoomType: String!
    createdAt: Time!
}
enum ChatRoomType{
    PRIVATE
    GROUP
}
enum MessageType{
    TEXT
    IMAGE
    VIDEO
    GIF
    AUDIO
}
enum State{
    SEND
    UNREAD
    READ
    DELETE
}
input NewUser{
    userName: String!
    firstName: String
    lastName: String
    email: String!
    contact: String
    profilePicture: String
    bio: String
}
input NewChatRoom{
    creatorID: ID!
    chatRoomName: String
    chatRoomType: ChatRoomType!
}
input NewChatRoomMember{
    chatRoomID: ID!
    memberID: ID!
}
input NewMessage{
    chatRoomID: ID!
    senderID: ID!
    message: String!
    messageType: MessageType!
    messageParentId: ID
    messageStatus: State!
}
input UpdateUser{
    userName: String
    firstName: String
    lastName: String
}
input UpdateMessage{
    message: String
    senderID: ID!
    messageID: ID!
    chatRoomID: ID!
}
input UpdateMessageStatus{
    messageStatus: State!
}
input DeleteChat{
    chatRoomID: ID!
    memberID: ID!
}
input LeaveChatRoom{
    chatRoomID: ID!
    memberID: ID!
}
input UpdateChatRoomDetail{
    chatRoomID: ID!
    chatRoomName: String
    updateByID: ID
}
input DeleteChatRoom{
    chatRoomID: ID!
    creaorID: ID!
}
input DeleteMessage{
    chatRoomID: ID!
    messageID: ID!
    DeleteByID: ID!
}
type Subscription{
    userJoined: User!
    messagePost(chatRoomID: ID!): ChatConversation!
    messageStatusUpdate(messageID: ID!, chatRoomID: ID!): ChatConversation!
    messageUpdate(chatRoomID: ID!): ChatConversation!
    messageDelete(chatRoomID: ID!): ChatConversation!
    chatRoomLeave(chatRoomID: ID!): ChatRoom!
    chatRoomDetailUpdate(chatRoomID: ID!): ChatRoom!
    chatRoomDelete(chatRoomID: ID!): ChatRoom!
    chatDelete(chatRoomID: ID!): ChatRoom!
    addNewMemberInChatRoom(chatRoomID: ID!): ChatRoom!
    chatRoomListByMember(memberID: ID!): ChatRoom!
}
type Mutation{
    newUser(input: NewUser!): User!
    newChatRoom(input: NewChatRoom!, receiverID: ID): ChatRoom!
    newChatRoomMember(input: NewChatRoomMember!): Member!
    newMessage(input: NewMessage!, senderID: ID!): ChatConversation!
    updateMessage(input: UpdateMessage): ChatConversation!
    updateMessageStatus(input: UpdateMessageStatus!): ChatConversation!
    deleteMessage(input: DeleteMessage): ChatConversation!
    deleteChat(input: DeleteChat!): Member!
    leaveChatRoom(input: LeaveChatRoom!): String!
    updateChatRoomDetail(input: UpdateChatRoomDetail!): ChatRoom!
    deleteChatRoom(input: DeleteChatRoom!): ChatRoom!
}
type Query{
    users(name: String!): [User!]!
    chatRooms: [ChatRoom!]
    chatconversationByChatRoomId(chatRoomID: ID!, memberID: ID!): [ChatConversation!]!
    memberListByChatRoomId(chatRoomID: ID!, memberID: ID!): [Member!]!
    chatRoomListByMemberId(memberID: ID!): [ChatRoomList!]!
}
scalar Time`},
)
